from celery.schedules import crontabfrom celery.task import task, periodic_taskfrom celery.utils.log import get_task_loggerfrom backend.settings import PROXY_LISTfrom proxy_pool.models import Proxyfrom proxy_pool.serializers import ProxyListSerializerfrom utils.date_time import nowfrom utils.proxy import FreeProxy, is_useful_proxylogger = get_task_logger(__name__)@task(name='check_proxy_task')def check_proxy(wait_check_proxy_list, need_delete=False):    for proxy in wait_check_proxy_list:        print(proxy)        if is_useful_proxy(proxy):            if need_delete:                deleted_proxy = Proxy.objects.get(address=proxy)                deleted_proxy.delete()            else:                data = {'address': proxy}                ser = ProxyListSerializer(data=data)                if ser.is_valid():                    ser.save()    return 0@task(name='get_proxy_task')def get_proxy(get_proxy_method):    fps = FreeProxy(get_proxy_method).get_free_proxy()    count = 0    wait_check_proxy_list = []    for proxy in fps:        count += 1        wait_check_proxy_list.append(proxy)        if count > 20:            check_proxy.delay(wait_check_proxy_list)            count = 0            wait_check_proxy_list = []    check_proxy.delay(wait_check_proxy_list)@task(name='delete_invalid_proxy_task')def delete_invalid_proxy():    proxy_list = [i.address for i in Proxy.objects.all() if                  now() - i.checked_time_stamp > 600]    count = 0    wait_deleted_proxy_list = []    for proxy in proxy_list:        count += 1        wait_deleted_proxy_list.append(proxy)        if count > 20:            check_proxy.delay(wait_deleted_proxy_list, need_delete=True)            count = 0            wait_deleted_proxy_list = []    check_proxy.delay(wait_deleted_proxy_list, need_delete=True)@periodic_task(    run_every=(crontab(minute='*/15')),    name='delete_invalid_proxy_periodic_task',    ignore_result=True)def delete_invalid_proxy_periodic_task():    delete_invalid_proxy.delay()@periodic_task(    run_every=(crontab(minute='*/60')),    name='get_proxy_periodic_task',    ignore_result=True)def get_proxy_periodic_task():    for proxy_method in PROXY_LIST:        get_proxy.delay(proxy_method)